<?php

/**
 * @file
 * Core functions for stratos erp module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\node\NodeInterface;
use Drupal\se_core\Event\SeCoreEvent;
use Drupal\se_core\Event\SeCoreEvents;
use Drupal\taxonomy\Entity\Term;

define('SE_CORE_NODE_TYPES', [
  'se_bill', 'se_contact', 'se_customer', 'se_document', 'se_goods_receipt',
  'se_invoice', 'se_item', 'se_payment', 'se_purchase_order', 'se_quote',
  'se_supplier', 'se_ticket', 'se_timekeeping',
]);

/**
 * Implements hook_help().
 *
 * @param $route_name
 * @param RouteMatchInterface $route_match
 *
 * @return TranslatableMarkup
 */
function se_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'se_core_main':
      return t('Main console page.');
  }
}

/**
 * Change the node buttons to be what we want.
 *
 * Implements hook_form_alter().
 *
 * @param $form
 * @param FormStateInterface $form_state
 * @param $form_id
 */
function se_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Make a list of forms from the core types.
  $se_forms = array_map(function ($value) {
    return 'node_' . $value . '_form';
  }, SE_CORE_NODE_TYPES);

  if (in_array($form_id, $se_forms)) {
    // We don't need the publish button, anywhere.
    se_core_hide_publish_buttons($form);

    // Hide the title fields for some node types.
    if (!in_array($form_id, [
      'node_se_customer_form', 'node_se_document_form',
      'node_se_item_form', 'node_se_supplier_form',
      'node_se_ticket_form'
    ])) {
      se_core_hide_title_field($form);
    }
  }
}

/**
 * Helper function to hide the publish buttons.
 *
 * @param array $form
 *   Form array to be manipulated.
 */
function se_core_hide_publish_buttons(array &$form) {
  // This should work.
  $form['actions']['unpublish']['#access'] = FALSE;
  $form['actions']['publish']['#access'] = FALSE;

  // But it doesn't. Sledge hammer time.
  unset($form['actions']['unpublish']);
  unset($form['actions']['publish']);

  // Ensure that we can 'Save' as well.
  $form['actions']['submit']['#access'] = TRUE;
}

/**
 * Nodes are handy, but we don't really need the title field.
 *
 * @param array $form
 *   Form array to be manipulated.
 */
function se_core_hide_title_field(array &$form) {
  //$form['title']['#hidden'] = TRUE;
  $form['title']['#default_value'] = t('@date - @user', [
    '@date' => date('j-m-Y'),
    '@user' => get_current_user(),
  ])->render();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param FormStateInterface $form_state
 * @param $form_id
 */
function se_core_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Alter login form and add own custom submit handler.
  $form['#submit'][] = '_se_core_user_login_form_submit';
}

/**
 * Custom submit handler for login form.
 *
 * @param $form
 * @param FormStateInterface $form_state
 *
 */
function _se_core_user_login_form_submit($form, FormStateInterface $form_state) {
  $form_state->setRedirect('<front>');
}

function se_core_theme() {
  return [
    'se_core_admin_page' => [
      'variables' => [
        'counters' => [],
        'general_info' => [],
        'requirements' => NULL,
      ],
    ],
  ];
}

// Drupal core doesn't actually define events for when content is created
// or saved, so here we hijack hooks to do the right thing for the future.

/**
 * Provide standard events for all the se modules.
 *
 * @param NodeInterface $node
 *   Node that is being saved.
 *
 * @return object|array
 */
function se_core_node_presave(NodeInterface $node) {
  $type = $node->getType();
  if (in_array($type, SE_CORE_NODE_TYPES)) {
    $event = new SeCoreEvent($node);
    \Drupal::service('event_dispatcher')->dispatch(SeCoreEvents::NODE_PRESAVE, $event);
    return $event->getNode();
  }
  return [];
}

/**
 * Provide standard events for all the se modules.
 *
 * @param NodeInterface $node
 *   Node that is being saved.
 *
 * @return object|array
 */
function se_core_node_insert(NodeInterface $node) {
  $type = $node->getType();
  if (in_array($type, SE_CORE_NODE_TYPES)) {
    $event = new SeCoreEvent($node);
    \Drupal::service('event_dispatcher')->dispatch(SeCoreEvents::NODE_CREATED, $event);
    return $event->getNode();
  }
  return [];
}

/**
 * Provide standard events for all the se modules.
 *
 * @param NodeInterface $node
 *   Node that is being saved.
 *
 * @return object|array
 */
function se_core_node_update(NodeInterface $node) {
  $type = $node->getType();
  if (in_array($type, SE_CORE_NODE_TYPES)) {
    $event = new SeCoreEvent($node);
    \Drupal::service('event_dispatcher')->dispatch(SeCoreEvents::NODE_UPDATED, $event);
    return $event->getNode();
  }
  return [];
}

/**
 * Provide standard events for all the se modules.
 *
 * @param NodeInterface $node
 *   Node that is being deleted.
 */
function se_core_node_delete(NodeInterface $node) {
  $type = $node->getType();
  if (in_array($type, SE_CORE_NODE_TYPES)) {
    $event = new SeCoreEvent($node);
    \Drupal::service('event_dispatcher')->dispatch(SeCoreEvents::NODE_DELETED, $event);
  }

}

/**
 * Helper function for modules to install their own terms.
 * @param $taxonomy
 * @param $terms
 */
function se_core_create_terms($taxonomy, $terms) {
  foreach ($terms as $new_term) {
    $term = taxonomy_term_load_multiple_by_name($new_term, $taxonomy);
    if (empty($term)) {
      Term::create([
        'parent' => [],
        'name'   => $new_term,
        'vid'    => $taxonomy,
      ])->save();
    }
  }
}

